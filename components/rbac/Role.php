<?php
/**
 * Created by Digital-Solution.Ru web-studio.
 * https://digital-solution.ru
 * support@digital-solution.ru
 */

namespace framework\components\rbac;


use framework\components\db\ActiveRecord;
use framework\components\db\SqlBuilder;
use framework\exceptions\ErrorException;

class Role extends ActiveRecord
{
    const RBAC_RELATION_TABLE = 'rbac_relation';

    const RBAC_RELATION_PERMISSION_IN_ROLE = 'rrpir';
    const RBAC_RELATION_USERS_AND_ROLES = 'rruar';
    const RBAC_RELATION_PERMISSION_IN_PERMISSION = 'rrpip';

    protected $_permissions = false;

    public function attributeLabels()
    {
        return array_merge(['slug' => 'Метка роли', 'name' => 'Название роли', 'description' => 'Описание роли'], parent::attributeLabels()); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [$this->getFields(), 'safe']
        ];
    }

    public function getPermissionObjects()
    {
        if(empty($this->getPermissions())) return null;
        else
        {
            return Permission::find("id IN(".implode(',', $this->getPermissions()).")")->all();
        }
    }


    public function getPermissions()
    {
        if(is_array($this->_permissions)) return $this->_permissions;
        else
        {
            $sql = new SqlBuilder();
            $sql->select(self::RBAC_RELATION_TABLE);
            $sql->fields("id_permission");
            $sql->where([['relation' => self::RBAC_RELATION_PERMISSION_IN_ROLE], ['id_role' => $this->getIdentity()]]);

            $permissions = [];

            foreach($sql->row() as $value)
                $permissions[] = $value['id_permission'];

            $this->_permissions = $permissions;

            return $permissions;
        }
    }

    public function setPermissions($permissionsArray, $clearBefore = true)
    {
        // Сравнение
        if($this->getPermissions() == $permissionsArray) return false;

        // Очистка всех привязок
        $sql = new SqlBuilder();
        $sql->delete(self::RBAC_RELATION_TABLE);
        $sql->where([['relation' => self::RBAC_RELATION_PERMISSION_IN_ROLE], ['id_role' => $this->getIdentity()]]);
        $sql->execute();
        unset($sql);
        $this->_permissions = [];

        if(!empty($permissionsArray))
        {
            foreach ($permissionsArray as $key)
            {


                $sql = new SqlBuilder();
                $sql->insert(self::RBAC_RELATION_TABLE);
                $sql->set([
                    'relation' => self::RBAC_RELATION_PERMISSION_IN_ROLE,
                    'id_role' => $this->getIdentity(),
                    'id_permission' => $key
                ]);
                $sql->execute();

                $this->_permissions[] = $key;

                unset($sql);
            }
            return true;
        }
        else
        {
            $this->_permissions = [];
            return true;
        }

        return false;
    }

    public function permission_exists($permissionID)
    {
        $sql = new SqlBuilder();
        $sql->select(self::RBAC_RELATION_TABLE);
        $sql->where([
            'relation' => self::RBAC_RELATION_PERMISSION_IN_ROLE,
            'id_role' => $this->getIdentity(),
            'id_permission' => $permissionID
        ]);
        if(count($sql->row()) > 0)
            return true;
        else
            return false;
    }


    protected function _addPermission($permissionID)
    {
        if($this->permission_exists($permissionID)) return false;

        $sql = new SqlBuilder();
        $sql->insert(self::RBAC_RELATION_TABLE);
        $sql->set([
            'relation' => self::RBAC_RELATION_PERMISSION_IN_ROLE,
            'id_role' => $this->getIdentity(),
            'id_permission' => $permissionID
        ]);
        $sql->execute();

        $this->_permissions[] = $permissionID;

        unset($sql);
        return true;
    }
}